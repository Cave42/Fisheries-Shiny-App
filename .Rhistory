SRMQ_rep.new<-readLines(paste(filepath,"/h_BMSY_FMSY/bmsyb0.rep",sep=""))
SRMQ_par[i]<-as.numeric(strsplit(readLines(paste(filepath,"/h_BMSY_FMSY/bmsyb0.par",sep="")),split=" ")[[1]][11])
steep_expo.out<-as.numeric(strsplit(SRMQ_rep.new[1]," ")[[1]])
if(steep_expo.out[1]<0.2|steep_expo.out[1]>=2|steep_expo.out[2]>10|SRMQ_par[i]>0.1)
{
#print("retry 1")
SRdat.new[21]<-"-0.1"
write(SRdat.new,paste(filepath,"/h_BMSY_FMSY/BMSYB0.dat",sep=""))
RUN.SS(paste(filepath,"/h_BMSY_FMSY/",sep=""), ss.exe="BMSYB0",ss.cmd=" -nox > out.txt")
SRMQ_rep.new<-readLines(paste(filepath,"/h_BMSY_FMSY/bmsyb0.rep",sep=""))
SRMQ_par[i]<-as.numeric(strsplit(readLines(paste(filepath,"/h_BMSY_FMSY/bmsyb0.par",sep="")),split=" ")[[1]][11])
steep_expo.out<-as.numeric(strsplit(SRMQ_rep.new[1]," ")[[1]])
if(steep_expo.out[1]<0.25|steep_expo.out[1]>=1|steep_expo.out[2]>10|SRMQ_par[i]>0.1)
{
#print("retry 2")
SRdat.new[21]<-"-1.51"
write(SRdat.new,paste(filepath,"/h_BMSY_FMSY/BMSYB0.dat",sep=""))
RUN.SS(paste(filepath,"/h_BMSY_FMSY/",sep=""), ss.exe="BMSYB0",ss.cmd=" -nox > out.txt")
SRMQ_rep.new<-readLines(paste(filepath,"/h_BMSY_FMSY/bmsyb0.rep",sep=""))
SRMQ_par[i]<-as.numeric(strsplit(readLines(paste(filepath,"/h_BMSY_FMSY/bmsyb0.par",sep="")),split=" ")[[1]][11])
steep_expo.out<-as.numeric(strsplit(SRMQ_rep.new[1]," ")[[1]])
}
if(steep_expo.out[1]<0.25|steep_expo.out[1]>=1|steep_expo.out[2]>10|SRMQ_par[i]>0.1)
{
#print("retry 3")
SRdat.new[21]<-"-0.51"
SRdat.new[23]<-"-0.31"
write(SRdat.new,paste(filepath,"/h_BMSY_FMSY/BMSYB0.dat",sep=""))
RUN.SS(paste(filepath,"/h_BMSY_FMSY/",sep=""), ss.exe="BMSYB0",ss.cmd=" -nox > out.txt")
SRMQ_rep.new<-readLines(paste(filepath,"/h_BMSY_FMSY/bmsyb0.rep",sep=""))
SRMQ_par[i]<-as.numeric(strsplit(readLines(paste(filepath,"/h_BMSY_FMSY/bmsyb0.par",sep="")),split=" ")[[1]][11])
steep_expo.out<-as.numeric(strsplit(SRMQ_rep.new[1]," ")[[1]])
}
}
if(steep_expo.out[1]>=0.2&steep_expo.out[1]<2&steep_expo.out[2]<=10&SRMQ_par[i]<0.1){x<-2}
}
}
Input.draws[i,1]<-h.draw<-steep_expo.out[1]
SR_expo.out[i]<-steep_expo.out[2]
file.remove(paste(filepath,"/h_BMSY_FMSY/bmsyb0.rep",sep=""))
file.remove(paste(filepath,"/h_BMSY_FMSY/bmsyb0.par",sep=""))
}
#Three parameter S-R model
if(Zfrac.Beta.in[1]>=0)
{
if(Zfrac.Beta.in[1]==10){Zfrac.draw<-round(rtnorm(1,Zfrac.Beta.in[2],Zfrac.Beta.in[3],0,1),2)}
if(Zfrac.Beta.in[1]==30){Zfrac.draw<-round(rlnormTrunc(1,log(Zfrac.Beta.in[2]),Zfrac.Beta.in[3],0,1),2)}
if(Zfrac.Beta.in[1]==4){Zfrac.draw<-round(runif(1,Zfrac.Beta.in[2],Zfrac.Beta.in[3]),2)}
Input.draws[i,1]<-Zfrac.draw
}
if(Zfrac.Beta.in[4]>=0)
{
if(Zfrac.Beta.in[4]==10){Beta.draw<-round(rtnorm(1,Zfrac.Beta.in[5],Zfrac.Beta.in[6],0,10),2)}
if(Zfrac.Beta.in[4]==30){Beta.draw<-round(rlnormTrunc(1,log(Zfrac.Beta.in[5]),Zfrac.Beta.in[6],0,10),2)}
if(Zfrac.Beta.in[4]==4){Beta.draw<-round(runif(1,Zfrac.Beta.in[5],Zfrac.Beta.in[6]),2)}
Input.draws[i,7]<-Beta.draw
}
### Change DAT and CTL inputs ###
#change Depletion
if(Dep.in[1]>=0)
{
# Dep.line<-strsplit(dat.new[grep("DEPLETION",dat.new)], " ")[[1]]
# fleet_num<-Dep.line[3]
# Dep.line[4]<-Dep.draw
# dat.new[grep("DEPLETION",dat.new)]<-paste(Dep.line,collapse=" ")
# write(dat.new,paste(filepath,"/",file.name[1],sep=""))
dat.new$CPUE[2,4]<-Dep.draw
SS_writedat(dat.new, paste0(filepath,"/",file.name[1]), overwrite=TRUE,verbose=FALSE)
}
#change M
Sys.sleep(1)
if(M.in[1]>=0)
{
ctl.new$MG_parms[1,3]<-M.draw
#M.line<-strsplit(ctl.new[grep("NatM_p_1_Fem_GP_1",ctl.new)], " ")[[1]]
#M.line[c(3,4)]<-M.draw
#ctl.new[grep("NatM_p_1_Fem_GP_1",ctl.new)]<-paste(M.line,collapse=" ")
}
#change growth parameters
if(sum(L1.in[1:2])>0)
{
ctl.new$MG_parms[2,3:4]<-L1.draw
# L1.line<-strsplit(ctl.new[grep("L_at_Amin_Fem_GP_1",ctl.new)], " ")[[1]]
# L1.line[c(3,4)]<-L1.draw
# ctl.new[grep("L_at_Amin_Fem_GP_1",ctl.new)]<-paste(L1.line,collapse=" ")
}
if(sum(Linf.in[1:2])>0)
{
ctl.new$MG_parms[3,3:4]<-Linf.draw
#   Linf.line<-strsplit(ctl.new[grep("L_at_Amax_Fem_GP_1",ctl.new)], " ")[[1]]
#   Linf.line[c(3,4)]<-Linf.draw
#   ctl.new[grep("L_at_Amax_Fem_GP_1",ctl.new)]<-paste(Linf.line,collapse=" ")
}
if(sum(k.in[1:2])>0)
{
ctl.new$MG_parms[4,3:4]<-k.draw
# k.line<-strsplit(ctl.new[grep("VonBert_K_Fem_GP_1",ctl.new)], " ")[[1]]
# k.line[c(3,4)]<-k.draw
# ctl.new[grep("VonBert_K_Fem_GP_1",ctl.new)]<-paste(k.line,collapse=" ")
}
#change male pararmeters
if(sexes==T)
{
#change M
if(M.in[4]>=0)
{
ctl.new$MG_parms[13,3]<-M.draw.M
# M.line.M<-strsplit(ctl.new[grep("NatM_p_1_Mal_GP_1",ctl.new)], " ")[[1]]
# M.line.M[c(3,4)]<-M.draw.M
# ctl.new[grep("NatM_p_1_Mal_GP_1",ctl.new)]<-paste(M.line.M,collapse=" ")
}
#change growth parameters
if(sum(L1.in[3:4])>0)
{
ctl.new$MG_parms[14,3]<-L1.draw.M
# L1.line.M<-strsplit(ctl.new[grep("L_at_Amin_Mal_GP_1",ctl.new)], " ")[[1]]
# L1.line.M[c(3,4)]<-L1.draw.M
# ctl.new[grep("L_at_Amin_Mal_GP_1",ctl.new)]<-paste(L1.line.M,collapse=" ")
}
if(sum(Linf.in[3:4])>0)
{
ctl.new$MG_parms[15,3]<-Linf.draw.M
# Linf.line.M<-strsplit(ctl.new[grep("L_at_Amax_Mal_GP_1",ctl.new)], " ")[[1]]
# Linf.line.M[c(3,4)]<-Linf.draw.M
# ctl.new[grep("L_at_Amax_Mal_GP_1",ctl.new)]<-paste(Linf.line.M,collapse=" ")
}
if(sum(k.in[3:4])>0)
{
ctl.new$MG_parms[16,3]<-k.draw.M
# k.line.M<-strsplit(ctl.new[grep("VonBert_K_Mal_GP_1",ctl.new)], " ")[[1]]
# k.line.M[c(3,4)]<-k.draw.M
# ctl.new[grep("VonBert_K_Mal_GP_1",ctl.new)]<-paste(k.line.M,collapse=" ")
}
}
ctl.new$SR_function<-SR_type
# SRtype.line<-strsplit(ctl.new[grep("SR_function",ctl.new)], " ")[[1]]
# SRtype.line[1]<-SR_type
# ctl.new[grep("SR_function",ctl.new)]<-paste(SRtype.line,collapse=" ")
#change R0
if(R_start[1]==0)
{
R0.draw<-R_start[2]
ctl.new$SR_parms[1,3:4]<-R0.draw
# R0.line<-strsplit(ctl.new[grep("R0",ctl.new)], " ")[[1]]
# R0.line[c(3,4)]<-R0.draw
# ctl.new[grep("R0",ctl.new)]<-paste(R0.line,collapse=" ")
}
if(R_start[1]==1)
{
R0.draw<-round(rlnormTrunc(1,log(R_start[2]),0.5,3,15),2)
ctl.new$SR_parms[1,3:4]<-R0.draw
# R0.line<-strsplit(ctl.new[grep("R0",ctl.new)], " ")[[1]]
# R0.line[c(3,4)]<-R0.draw
# ctl.new[grep("R0",ctl.new)]<-paste(R0.line,collapse=" ")
}
#change h
if(SR_type==3)
{
ctl.new$SR_parms[2,3:4]<-h.draw
# h.line<-strsplit(ctl.new[grep("SR_BH_steep",ctl.new)], " ")[[1]]
# h.line[c(3,4)]<-h.draw
# ctl.new[grep("SR_BH_steep",ctl.new)]<-paste(h.line,collapse=" ")
}
if(SR_type==9)
{
ctl.new$SR_parms[2,3:4]<-h.draw
ctl.new$SR_parms[3,3:4]<-SR_expo.out[i]
h.line<-strsplit(ctl.new[grep("SR_RkrPower_steep",ctl.new)], " ")[[1]]
# h.line[c(3,4)]<-h.draw
# ctl.new[grep("SR_RkrPower_steep",ctl.new)]<-paste(h.line,collapse=" ")
# SRexpo.line<-strsplit(ctl.new[grep("SR_RkrPower_gamma",ctl.new)], " ")[[1]]
# SRexpo.line[c(3,4)]<-SR_expo.out[i]
# ctl.new[grep("SR_RkrPower_gamma",ctl.new)]<-paste(SRexpo.line,collapse=" ")
}
#change Sfrac and Beta
if(SR_type==7 & Zfrac.Beta.in[1]>=0)
{
ctl.new$SR_parms[2,3:4]<-Zfrac.draw
# Zfrac.line<-strsplit(ctl.new[grep("Zfrac",ctl.new)], " ")[[1]]
# Zfrac.line[c(3,4)]<-Zfrac.draw
# ctl.new[grep("Zfrac",ctl.new)]<-paste(Zfrac.line,collapse=" ")
}
if(SR_type==7 & Zfrac.Beta.in[4]>=0)
{
ctl.new$SR_parms[3,3:4]<-Beta.draw
# Beta.line<-strsplit(ctl.new[grep("Beta",ctl.new)], " ")[[1]]
# Beta.line[c(3,4)]<-Beta.draw
# ctl.new[grep("Beta",ctl.new)]<-paste(Beta.line,collapse=" ")
}
#write(ctl.new,paste(filepath,"/",file.name[2],sep=""))
SS_writectl(ctl.new, paste0(filepath,"/",file.name[2]), overwrite=TRUE,verbose=FALSE)
#Run model
if(OStype=="Windows"){RUN.SS(paste(filepath,"/",sep=""), ss.exe="ss",ss.cmd=" -nohess -nox > out.txt 2>&1")}
if(OStype=="OSX_Linux"){RUN.SS(paste(filepath,"/",sep=""), ss.exe="./ss",ss.cmd=" -nohess -nox > out.txt 2>&1")}
#Evaluate convergence and record values
rep.new<-readLines(paste(filepath,"/Report.sso",sep=""))
Sys.sleep(0.5)
#The R0 loop. Makes sure R0 is changing from input and that the depletion match is happening. Ensures good models are kept.
#Profiles over R0 when intial run fails.
if(doR0.loop[1]>0)
{
xx<-1
R0.explore<-seq(doR0.loop[2],doR0.loop[3],doR0.loop[4])
if(is.na(as.numeric(strsplit(rep.new[grep(paste("Bratio_",as.numeric(dat.new$CPUE[2,1]),sep=""),rep.new)], " ")[[1]][3]))==TRUE){Dep.out.testR0<-10}
if(is.na(as.numeric(strsplit(rep.new[grep(paste("Bratio_",as.numeric(dat.new$CPUE[2,1]),sep=""),rep.new)], " ")[[1]][3]))==FALSE){Dep.out.testR0<-as.numeric(strsplit(rep.new[grep(paste("Bratio_",as.numeric(dat.new$CPUE[2,1]),sep=""),rep.new)], " ")[[1]][3])}
#  while(abs(as.numeric(strsplit(rep.new[grep("R0",rep.new)], " ")[[1]][3])-as.numeric(strsplit(rep.new[grep("R0",rep.new)], " ")[[1]][8]))==0)
while(abs(Dep.out.testR0-Dep.draw)>0.01)
{
print(paste0("IN THE LOOP: R0= ",R0.explore[xx]))
ctl.new$SR_parms[1,3:4]<-R0.explore[xx]
SS_writectl(ctl.new, paste0(filepath,"/",file.name[2]), overwrite=TRUE,verbose=FALSE)
# ctl.new<-readLines(paste(filepath,"/",file.name[2],sep=""))
# R0.line<-strsplit(ctl.new[grep("R0",ctl.new)], " ")[[1]]
# R0.line[c(3,4)]<-R0.explore[xx]
# ctl.new[grep("R0",ctl.new)]<-paste(R0.line,collapse=" ")
# write(ctl.new,paste(filepath,"/",file.name[2],sep=""))
if(OStype=="Windows"){RUN.SS(paste(filepath,"/",sep=""), ss.exe="ss",ss.cmd=" -nohess -nox > out.txt 2>&1")}
if(OStype=="OSX_Linux"){RUN.SS(paste(filepath,"/",sep=""), ss.exe="./ss",ss.cmd=" -nohess -nox > out.txt 2>&1")}
rep.new<-readLines(paste(filepath,"/Report.sso",sep=""))
if(is.na(as.numeric(strsplit(rep.new[grep(paste("Bratio_",as.numeric(dat.new$CPUE[2,1]),sep=""),rep.new)], " ")[[1]][3]))==TRUE){Dep.out.testR0<-10}
if(is.na(as.numeric(strsplit(rep.new[grep(paste("Bratio_",as.numeric(dat.new$CPUE[2,1]),sep=""),rep.new)], " ")[[1]][3]))==FALSE){Dep.out.testR0<-as.numeric(strsplit(rep.new[grep(paste("Bratio_",as.numeric(dat.new$CPUE[2,1]),sep=""),rep.new)], " ")[[1]][3])}
print(paste0("Is depletion difference < 0.01? ",(abs(as.numeric(strsplit(rep.new[grep(paste("Bratio_",as.numeric(dat.new$CPUE[2,1]),sep=""),rep.new)], " ")[[1]][3])-Dep.draw)<0.01)))
xx<-xx+1
if(xx==length(R0.explore)){break}
}
}
#Begin extracting info from run
#forecast.file<-readLines(paste(filepath,"/Forecast-report.sso",sep=""))
for(iii in 1:length(ts_yrs[1]:ts_yrs[2]))
{
SB.out[i,iii]<-as.numeric(strsplit(rep.new[grep(paste("SSB_",sb.years[iii],sep=""),rep.new)], " ")[[1]][3])
TB.out[i,iii]<-as.numeric(strsplit(rep.new[grep("TIME_SERIES",rep.new)+3+iii], " ")[[2]][5])
SumAge.out[i,iii]<-as.numeric(strsplit(rep.new[grep("TIME_SERIES",rep.new)+3+iii], " ")[[2]][6])
SPR.out[i,iii]<-1-as.numeric(strsplit(rep.new[grep(paste("SPRratio_",sb.years[iii]+1,sep=""),rep.new)], " ")[[1]][3])
#       B_BMSY.out[i,iii]<-as.numeric(strsplit(rep.new[grep("Yr  B/Bmsy  F/Fmsy",rep.new)+iii], " ")[[1]][2])
}
Dep.series.out<-SB.out/SB.out[,1]
Quant.out[i,1]<-as.numeric(strsplit(rep.new[grep("NatM_p_1_Fem_GP_1",rep.new)], " ")[[1]][3])
Quant.out[i,2]<-as.numeric(strsplit(rep.new[grep("L_at_Amin_Fem_GP_1",rep.new)], " ")[[1]][3])
Quant.out[i,3]<-as.numeric(strsplit(rep.new[grep("L_at_Amax_Fem_GP_1",rep.new)], " ")[[1]][3])
Quant.out[i,4]<-as.numeric(strsplit(rep.new[grep("VonBert_K_Fem_GP_1",rep.new)], " ")[[1]][3])
if(sexes==T)
{
Quant.out[i,5]<-as.numeric(strsplit(rep.new[grep("NatM_p_1_Mal_GP_1",rep.new)], " ")[[1]][3])
Quant.out[i,6]<-as.numeric(strsplit(rep.new[grep("L_at_Amin_Mal_GP_1",rep.new)], " ")[[1]][3])
Quant.out[i,7]<-as.numeric(strsplit(rep.new[grep("L_at_Amax_Mal_GP_1",rep.new)], " ")[[1]][3])
Quant.out[i,8]<-as.numeric(strsplit(rep.new[grep("VonBert_K_Mal_GP_1",rep.new)], " ")[[1]][3])
}
if(SR_type==3){Quant.out[i,9]<-as.numeric(strsplit(rep.new[grep("SR_BH_steep",rep.new)], " ")[[1]][3])}
if(SR_type==7){Quant.out[i,9]<-as.numeric(strsplit(rep.new[grep("SR_surv_Beta",rep.new)-1], " ")[[1]][3])}
if(SR_type==7){Quant.out[i,29]<-as.numeric(strsplit(rep.new[grep("SR_surv_Beta",rep.new)], " ")[[1]][3])}
if(SR_type==8){Quant.out[i,9]<-as.numeric(strsplit(rep.new[grep("SR_RkrPower_steep",rep.new)], " ")[[1]][3])}
if(SR_type==8){Quant.out[i,29]<-as.numeric(strsplit(rep.new[grep("SR_RkrPower_gamma",rep.new)], " ")[[1]][3])}
Quant.out[i,10]<-as.numeric(strsplit(rep.new[grep("R0",rep.new)], " ")[[1]][3])
Quant.out[i,11]<-as.numeric(strsplit(rep.new[grep("SSB_Initial",rep.new)], " ")[[1]][3])
Quant.out[i,12]<-as.numeric(strsplit(rep.new[grep(paste("SSB_",ts_yrs[2],sep=""),rep.new)], " ")[[1]][3])
Quant.out[i,13]<-as.numeric(strsplit(rep.new[grep(paste("SSB_",ts_yrs[2],sep=""),rep.new)], " ")[[1]][3])/as.numeric(strsplit(rep.new[grep("SSB_Initial",rep.new)], " ")[[1]][3])
Quant.out[i,14]<-as.numeric(strsplit(rep.new[grep(paste("OFLCatch_",ofl_yrs[1],sep=""),rep.new)], " ")[[1]][2])
Quant.out[i,15]<-as.numeric(strsplit(rep.new[grep(paste("ForeCatch_",ofl_yrs[1],sep=""),rep.new)], " ")[[1]][2])
Quant.out[i,16]<-as.numeric(strsplit(rep.new[grep("SSB_MSY",rep.new)], " ")[[1]][2])/as.numeric(strsplit(rep.new[grep("SSB_Initial",rep.new)], " ")[[1]][3])
Quant.out[i,17]<-as.numeric(strsplit(rep.new[grep("Bmsy/Bzero",rep.new)], " ")[[1]][1])
#Quant.out[i,17]<-as.numeric(strsplit(forecast.file[grep("calculate_FMSY",forecast.file)+13],split="[[:blank:]]+")[[1]][2])/as.numeric(strsplit(forecast.file[grep("BIO_Smry_unfished",forecast.file)],split="[[:blank:]]+")[[1]][2])
Quant.out[i,18]<-as.numeric(strsplit(rep.new[grep("annF_MSY",rep.new)], " ")[[1]][2])
Quant.out[i,19]<-as.numeric(strsplit(rep.new[grep("TOTAL",rep.new)], " ")[[1]][2])
Quant.out[i,20]<-as.numeric(strsplit(rep.new[grep("TOTAL",rep.new)+2], " ")[[1]][2])
Quant.out[i,21]<-as.numeric(strsplit(rep.new[grep("Convergence",rep.new)], " ")[[1]][2])
if(Dep.in[1]>=0){Quant.out[i,22]<-as.numeric(dat.new$CPUE[2,4])}
if(Dep.in[1]>=0){Quant.out[i,23]<-as.numeric(strsplit(rep.new[grep(paste("Bratio_",as.numeric(dat.new$CPUE[2,1]),sep=""),rep.new)], " ")[[1]][3])}
Quant.out[i,24]<-as.numeric(strsplit(rep.new[grep("R0",rep.new)], " ")[[1]][8])
Quant.out[i,25]<-as.numeric(strsplit(rep.new[grep(paste("F_",ts_yrs[2],sep=""),rep.new)], " ")[[1]][3])/as.numeric(strsplit(rep.new[grep("annF_MSY",rep.new)], " ")[[1]][2])
Quant.out[i,26]<-as.numeric(strsplit(rep.new[grep(paste("OFLCatch_",ofl_yrs[2],sep=""),rep.new)], " ")[[1]][2])
Quant.out[i,27]<-as.numeric(strsplit(rep.new[grep(paste("ForeCatch_",ofl_yrs[2],sep=""),rep.new)], " ")[[1]][2])
Quant.out[i,28]<-as.numeric(strsplit(rep.new[grep("Crash_Pen",rep.new)], " ")[[1]][2])
warnings.out<-readLines(paste(filepath,"/warning.sso",sep=""))
num.warning<-as.numeric(strsplit(warnings.out[grep("N warnings",warnings.out)[1]], " ")[[1]][4])
if(Dep.in[1]>=0)
{
if(FMSY_M.in[1]<0 & BMSY_B0.in[1]<0&abs(Quant.out[i,22]-Quant.out[i,23])<0.01&Quant.out[i,28]<0.0001&Quant.out[i,14]<100000){i<-i+1}
if(FMSY_M.in[1]>=0 & BMSY_B0.in[1]>=0 | h.in[1]==99 | BH_FMSY_comp==T)
{
if(h.in[1]==99)
{
if(abs(Quant.out[i,22]-Quant.out[i,23])<0.01&Quant.out[i,28]<0.0001&Quant.out[i,14]<100000&(abs(Quant.out[i,18]-Input.draws.MQs[i,3])/Input.draws.MQs[i,3])<0.6){i<-i+1}
else
{
if(n.bad==0){Quant.out.bad<-Quant.out[i,]}
if(n.bad>0){Quant.out.bad<-rbind(Quant.out.bad,Quant.out[i,])}
n.bad<-n.bad+1
if(length(M.in)>6|length(Dep.in)>3|length(h.in)>3|length(FMSY_M.in)>3|length(BMSY_B0.in)>3)
{
Quant.out[i,]<-NA
i<-i+1
}
}
}
else
{
if(abs(Quant.out[i,22]-Quant.out[i,23])<0.01&Quant.out[i,28]<0.0001&Quant.out[i,14]<100000&(abs(Quant.out[i,16]-(Input.draws.MQs[i,2])/100)/(Input.draws.MQs[i,2]/100))<0.5){i<-i+1}
else
{
if(n.bad==0){Quant.out.bad<-Quant.out[i,]}
if(n.bad>0){Quant.out.bad<-rbind(Quant.out.bad,Quant.out[i,])}
n.bad<-n.bad+1
if(length(M.in)>6|length(Dep.in)>3|length(h.in)>3|length(FMSY_M.in)>3|length(BMSY_B0.in)>3)
{
Quant.out[i,]<-NA
i<-i+1
}
}
}
}
else
{
if(n.bad==0){Quant.out.bad<-Quant.out[i,]}
if(n.bad>0){Quant.out.bad<-rbind(Quant.out.bad,Quant.out[i,])}
n.bad<-n.bad+1
if(length(M.in)>6|length(Dep.in)>3|length(h.in)>3|length(FMSY_M.in)>3|length(BMSY_B0.in)>3)
{
Quant.out[i,]<-NA
i<-i+1
}
}
# }
}
if(Dep.in[1]<0)
{
if(Quant.out[i,28]<0.0001&Quant.out[i,14]<100000){i<-i+1}
else
{
#Run using .par file if above conditions not met
print("*** RUNNING WITH .PAR ***")
starter.new<-readLines(paste(filepath,"/starter.ss",sep=""))
par_line<-strsplit(starter.new[grep("ss.par",starter.new)], " ")[[1]]
par_line[1]<-1
starter.new[grep("ss.par",starter.new)]<-paste(par_line, collapse=" ")
write(starter.new,paste(filepath,"/starter.ss",sep=""))
if(OStype=="Windows"){RUN.SS(paste(filepath,"/",sep=""), ss.exe="ss",ss.cmd=" -nohess -nox > out.txt 2>&1")}
if(OStype=="OSX_Linux"){RUN.SS(paste(filepath,"/",sep=""), ss.exe="./ss",ss.cmd=" -nohess -nox > out.txt 2>&1")}
#RUN.SS(paste(filepath,"/",sep=""), ss.exe="ss",ss.cmd=" -nohess -nox > out.txt 2>&1")
rep.new<-readLines(paste(filepath,"/Report.sso",sep=""))
#forecast.file<-readLines(paste(filepath,"/Forecast-report.sso",sep=""))
for(iii in 1:length(ts_yrs[1]:ts_yrs[2]))
{
SB.out[i,iii]<-as.numeric(strsplit(rep.new[grep(paste("SSB_",sb.years[iii],sep=""),rep.new)], " ")[[1]][3])
TB.out[i,iii]<-as.numeric(strsplit(rep.new[grep("TIME_SERIES",rep.new)+3+iii], " ")[[2]][5])
SumAge.out[i,iii]<-as.numeric(strsplit(rep.new[grep("TIME_SERIES",rep.new)+3+iii], " ")[[2]][6])
SPR.out[i,iii]<-1-as.numeric(strsplit(rep.new[grep(paste("SPRratio_",sb.years[iii]+1,sep=""),rep.new)], " ")[[1]][3])
#        B_BMSY.out[i,iii]<-as.numeric(strsplit(rep.new[grep("Yr  B/Bmsy  F/Fmsy",rep.new)+iii], " ")[[1]][2])
}
Dep.series.out<-SB.out/SB.out[,1]
Quant.out[i,1]<-as.numeric(strsplit(rep.new[grep("NatM_p_1_Fem_GP_1",rep.new)], " ")[[1]][3])
Quant.out[i,2]<-as.numeric(strsplit(rep.new[grep("L_at_Amin_Fem_GP_1",rep.new)], " ")[[1]][3])
Quant.out[i,3]<-as.numeric(strsplit(rep.new[grep("L_at_Amax_Fem_GP_1",rep.new)], " ")[[1]][3])
Quant.out[i,4]<-as.numeric(strsplit(rep.new[grep("VonBert_K_Fem_GP_1",rep.new)], " ")[[1]][3])
if(sexes==T)
{
Quant.out[i,5]<-as.numeric(strsplit(rep.new[grep("NatM_p_1_Mal_GP_1",rep.new)], " ")[[1]][3])
Quant.out[i,6]<-as.numeric(strsplit(rep.new[grep("L_at_Amin_Mal_GP_1",rep.new)], " ")[[1]][3])
Quant.out[i,7]<-as.numeric(strsplit(rep.new[grep("L_at_Amax_Mal_GP_1",rep.new)], " ")[[1]][3])
Quant.out[i,8]<-as.numeric(strsplit(rep.new[grep("VonBert_K_Mal_GP_1",rep.new)], " ")[[1]][3])
}
if(SR_type==3){Quant.out[i,9]<-as.numeric(strsplit(rep.new[grep("SR_BH_steep",rep.new)], " ")[[1]][3])}
if(SR_type==7){Quant.out[i,9]<-as.numeric(strsplit(rep.new[grep("SR_surv_Beta",rep.new)-1], " ")[[1]][3])}
if(SR_type==7){Quant.out[i,29]<-as.numeric(strsplit(rep.new[grep("SR_surv_Beta",rep.new)], " ")[[1]][3])}
if(SR_type==8){Quant.out[i,9]<-as.numeric(strsplit(rep.new[grep("SR_RkrPower_steep",rep.new)], " ")[[1]][3])}
if(SR_type==8){Quant.out[i,29]<-as.numeric(strsplit(rep.new[grep("SR_RkrPower_gamma",rep.new)], " ")[[1]][3])}
Quant.out[i,10]<-as.numeric(strsplit(rep.new[grep("R0",rep.new)], " ")[[1]][3])
Quant.out[i,11]<-as.numeric(strsplit(rep.new[grep("SSB_Initial",rep.new)], " ")[[1]][3])
Quant.out[i,12]<-as.numeric(strsplit(rep.new[grep(paste("SSB_",ts_yrs[2],sep=""),rep.new)], " ")[[1]][3])
Quant.out[i,13]<-as.numeric(strsplit(rep.new[grep(paste("SSB_",ts_yrs[2],sep=""),rep.new)], " ")[[1]][3])/as.numeric(strsplit(rep.new[grep("SSB_Initial",rep.new)], " ")[[1]][3])
Quant.out[i,14]<-as.numeric(strsplit(rep.new[grep(paste("OFLCatch_",ofl_yrs[1],sep=""),rep.new)], " ")[[1]][2])
Quant.out[i,15]<-as.numeric(strsplit(rep.new[grep(paste("ForeCatch_",ofl_yrs[1],sep=""),rep.new)], " ")[[1]][2])
Quant.out[i,16]<-as.numeric(strsplit(rep.new[grep("SSB_MSY",rep.new)], " ")[[1]][2])/as.numeric(strsplit(rep.new[grep("SSB_Initial",rep.new)], " ")[[1]][3])
Quant.out[i,17]<-as.numeric(strsplit(rep.new[grep("Bmsy/Bzero",rep.new)], " ")[[1]][1])
#Quant.out[i,17]<-as.numeric(strsplit(forecast.file[grep("Maximum_Sustainable_Yield;_where_Yield_is_Dead_Catch",forecast.file)+14],split="[[:blank:]]+")[[1]][2])/as.numeric(strsplit(forecast.file[grep("BIO_Smry_unfished",forecast.file)],split="[[:blank:]]+")[[1]][2])
Quant.out[i,18]<-as.numeric(strsplit(rep.new[grep("annF_MSY",rep.new)], " ")[[1]][2])
Quant.out[i,19]<-as.numeric(strsplit(rep.new[grep("TOTAL",rep.new)], " ")[[1]][2])
Quant.out[i,20]<-as.numeric(strsplit(rep.new[grep("TOTAL",rep.new)+2], " ")[[1]][2])
Quant.out[i,21]<-as.numeric(strsplit(rep.new[grep("Convergence",rep.new)], " ")[[1]][2])
Quant.out[i,22]<-as.numeric(dat.new$CPUE[2,4])
Quant.out[i,23]<-as.numeric(strsplit(rep.new[grep(paste("Bratio_",as.numeric(dat.new$CPUE[2,1]),sep=""),rep.new)], " ")[[1]][3])
Quant.out[i,24]<-as.numeric(strsplit(rep.new[grep("R0",rep.new)], " ")[[1]][8])
Quant.out[i,25]<-as.numeric(strsplit(rep.new[grep(paste("F_",ts_yrs[2],sep=""),rep.new)], " ")[[1]][3])/as.numeric(strsplit(rep.new[grep("annF_MSY",rep.new)], " ")[[1]][2])
Quant.out[i,26]<-as.numeric(strsplit(rep.new[grep(paste("OFLCatch_",ofl_yrs[2],sep=""),rep.new)], " ")[[1]][2])
Quant.out[i,27]<-as.numeric(strsplit(rep.new[grep(paste("ForeCatch_",ofl_yrs[2],sep=""),rep.new)], " ")[[1]][2])
Quant.out[i,28]<-as.numeric(strsplit(rep.new[grep("Crash_Pen",rep.new)], " ")[[1]][2])
starter.new<-readLines(paste(filepath,"/starter.ss",sep=""))
par_line<-strsplit(starter.new[grep("ss.par",starter.new)], " ")[[1]]
par_line[1]<-0
starter.new[grep("ss.par",starter.new)]<-paste(par_line, collapse=" ")
write(starter.new,paste(filepath,"/starter.ss",sep=""))
if(Quant.out[i,28]<0.0001&Quant.out[i,14]<100000){i<-i+1}
else
{
if(n.bad==0){Quant.out.bad<-Quant.out[i,]}
if(n.bad>0){Quant.out.bad<-rbind(Quant.out.bad,Quant.out[i,])}
n.bad<-n.bad+1
}
}
}
print(paste0("Kept ",i-1))
ii<-ii+1
if(file.exists(paste(filepath,"/Report.sso",sep=""))){file.remove(paste(filepath,"/Forecast-report.sso",sep=""))}
if(file.exists(paste(filepath,"/Report.sso",sep=""))){file.remove(paste(filepath,"/Report.sso",sep=""))}
colnames(Quant.out)<-colnames(Quant.out.bad)<-c("M_f","L1_f","Linf_f","k_f","M_m","L1_m","Linf_m","k_m","h","R0","SB0",paste("SSB_",ts_yrs[2],sep=""),"Term_Yr_Dep",paste("OFL_",ofl_yrs[1],sep=""),paste("AdjCatch_",ofl_yrs[1],sep=""),"SBMSY/SB0","BMSY/B0","FMSY","-lnL","LL_survey","Gradient","Dep.Obs","Dep.Exp","R0_init",paste("F_",ts_yrs[2],"/FMSY",sep=""),paste("OFL_",ofl_yrs[2],sep=""),paste("AdjCatch_",ofl_yrs[2],sep=""),"Crash_penalty","Rick_gamma")
if(ncol(Input.draws)==10){colnames(Input.draws)<-c("h","Dep","M_f","L1_f","Linf_f","k_f","M_m","L1_m","Linf_m","k_m")}
if(ncol(Input.draws)==11){colnames(Input.draws)<-c("Sfrac","Dep","M_f","L1_f","Linf_f","k_f","Beta","M_m","L1_m","Linf_m","k_m")}
if(SR_type>=8 | h.in[1]==99 | BH_FMSY_comp==T)
{
Input.draws<-cbind(Input.draws,Input.draws.MQs,SR_expo.out,SRMQ_par)
ltcolnames<-length(colnames(Input.draws))
colnames(Input.draws)[c(ltcolnames-1,ltcolnames)]<-c("Beta","Obj_fxn")
}
end.time<-Sys.time()
Spp.quant.out<-list(Input.draws,Quant.out,SB.out,Dep.series.out,TB.out,SumAge.out,SPR.out,Quant.out.bad,ii-1,(as.numeric(end.time)-as.numeric(start.time))/60)
names(Spp.quant.out)<-c("Priors","Posteriors","SB_series","Rel_Stock_status_series","Total_Biomass","Summary_Biomass","SPR","Rejected_draws","Total draws","Runtime_minutes")
SSS.out<-Spp.quant.out
save(SSS.out,file=paste(filepath,"/SSS_out.DMP",sep=""))
}
return(Spp.quant.out)
}
SSS.out<-SSS("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario 1_sss",
file.name=c("sss_example.dat","sss_example.ctl"),
reps=10,
seed.in=19,
Dep.in=c(2,0.2,0.2),
M.in=c(3,0.123,0.2,0.123,0.2),
SR_type=3,
h.in=c(1,0.7,0.15),
FMSY_M.in=c(-1,0.5,0.1),
BMSY_B0.in=c(-1,0.5,0.1),
#L1.in=L1.in,
#Linf.in=Linf.in,
#k.in=k.in,
Zfrac.Beta.in=c(-99,0.2,0.6,-99,0.5,2),
R_start=c(0,8),
doR0.loop=c(1,4.1,12.1,0.5),
sum_age=0,
ts_yrs=c(1970,2019),
pop.ltbins=NA,
ofl_yrs=c(2020,2021),
sexes=F,
BH_FMSY_comp=F,
OStype="Windows")
install.packages(c("jsonlite", "xfun"))
install.packages(c( "xfun"))
devtools::install_github("shcaba/SSS", build_vignettes = TRUE)
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
Dep.in_sss
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
Q
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
SSS.out<-load(paste0(getwd(),"/Scenarios/",input$Scenario_name,"/SSS_out.DMP"))
SSS.out
names(SSS.out)
paste0(getwd(),"/Scenarios/",input$Scenario_name,"/SSS_out.DMP")
x<-load(paste0(getwd(),"/Scenarios/",input$Scenario_name,"/SSS_out.DMP"))
x
SSS.out
SSS.out$Prior$M_f
load(paste0(getwd(),"/Scenarios/",input$Scenario_name,"/SSS_out.DMP"))
sss.M.f<-rbind(data.frame(value=SSS.out$Prior$M_f,type="prior",metric="Female M"),data.frame(value=SSS.out$Post$M_f,type="post",metric="Female M"))
sss.M.m<-rbind(data.frame(value=SSS.out$Prior$M_m,type="prior",metric="Male M"),data.frame(value=SSS.out$Post$M_m,type="post",metric="Male M"))
sss.h<-rbind(data.frame(value=SSS.out$Prior$h,type="prior",metric="h"),data.frame(value=SSS.out$Post$h,type="post",metric="h"))
sss.Dep<-rbind(data.frame(value=SSS.out$Prior$Dep,type="prior",metric="Dep"),data.frame(value=SSS.out$Post$Dep.Obs,type="post",metric="Dep"))
sss.vals.out<-rbind(sss.M.f,sss.M.m,sss.h,sss.Dep)
sss.vals.growth.out<-rbind(sss.L1_f,sss.Linf_f,sss.k_f,sss.L1_m,sss.Linf_m,sss.k_m)
ggplot(sss.vals.out,aes(x=value,color=type))+
geom_histogram(position="dodge",alpha=0.5,fill="white")+
theme(legend.position="bottom")+
theme(legend.title=element_blank())+
facet_grid(~metric,scales = "free")
#
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
Q
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/Fisheries-Shiny-App')
install.packages("calibrate")
runApp('Github/Fisheries-Shiny-App')
